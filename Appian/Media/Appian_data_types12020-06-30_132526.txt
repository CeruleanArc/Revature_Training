Appian Data Types
	Appian data types can be one of the system types or a custom data type
	1.	Any Type
		The Any Type is a generic data type and can store any type data in it.
	2.	Primitive system data type
		Boolean	
			Values include True / False.
			1 is accepted as a literal value meaning Yes.
			0 is accepted as a literal value meaning No.
			The default value is null, which appears as [Empty Value] in a process variable.
			You can populate the value using results from the true() or false() functions.
			The toboolean() function can be used to convert true/false and 0/1 values into a Boolean data type value.
			
		Date	
			it is used to hold date value.
			Date can be created using the date(year, month, date) function. Default value is empty.
			ex: date(2020, 06, 29) O/P : 6/29/2020
			
		Date and Time
			it is used to hold date and time value.
			Date can be created using the datetime(year, month, date, hour, minute, second).
			A Date and Time value is saved in Greenwich Mean Time (GMT) then converted to the end-user's time zone when displayed.
			ex: datetime(2020, 06, 29, 10,25,10) O/P: 6/29/2020 10:25 AM GMT+00:00
			If you dont provide time in this function then it takes 12:00 am as default time.
			ex: datetime(2020, 06, 29) O/P: 6/29/2020 12:00 AM GMT+00:00
			
		Encrypted Text  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			This type is used to store an Encrypted Text value. An Encrypted Text value can be created in one of the following ways:

				Entered by a user in a EncryptedTextField component. (This we will cover in interface components)
				Generated in a plug-in using the EncryptionService public Java API    

		Number (Decimal)
			Holds numeric data stored as double precision floating-point decimal numbers. The default value is 0.0.
			Decimal numbers can be created from text strings using the todecimal() function.
			
		Number (Integer)
			Integer numbers can range from -2,147,483,647 to 2,147,483,647 (or from -231+1 to 231-1 in scientific notation).
			The default value is 0 and the null value is -2\^31.
			Integer numbers can be created from text strings using the tointeger() function.

		Text
			This type is used to store any UTF-8 text string. Numerical values can be entered into the text data type; 
			however, data manipulation cannot be performed on the text data type (except for report aggregations).
			The default value is [Empty Value].
			
		Time
			Time data can be created using the time(hour,minute,second) function.
			Ex: time(10,25,10) O/P: 10:25 AM
			
	Complex System Data Types
		Complex system types are made available in the system to support smart services. These types cannot be edited or deleted. 
		Ex: DataSubset, ApplicationTestResult, etc.
		
	Appian Object Data Types
		An Appian Object data type is a required format for objects specific to the Appian system. 
		Similar to primitive and complex system types, each can be used to store either a single value or a list of values.
		Appian Object data types are only recognizable within the Appian system.
		Ex: ALL Appian Objects like interfaces , process models ,Application, Data Store Entity, interface etc.
		
	Custom Data Types (CDTs)	
		USer can create or import their own custom data types (CDTs). 
		CDT is to organize data into a structure and represents logical grouping of related data.
		Ex: Employee, Address, etc.
		CDTs can be used 
			To read data from database 
			Write to a database tables 
			To store information within a process 
			To define inputs or outputs of a web service or Appian plug-in
		We can add diagram here if required
			
		How to create CDTs:
			Create from scratch
			Duplicate existing data type
			Create from database table or view
			Import XSD
			
		How to edit cdts
			Download the XSD and Update/Add column. Go to Designed and export the XSD -> save and pulish the data store.
			Update table first and then download XSD update/Add column --> Data store will publish automaically.
			
		Delete
			Selecte the CDT you wnat to delete and click on delete button.
			
		Create New Version from XSD
			If you want to modify any thing in the CDT and need to update to the same cdt then
			To download the XSD file for a data type, click Download XSD in the settings menu of the data type designer.
			Once you have made the necessary changes to the file, click Create New Version from XSD in the settings menu 
			and upload the new version of the XSD.
		
		CDTs Best practices
			It is always a best practice to have different tables for different type of data instead of a single 
			table for all data. 
			You can use multiple CDT's for different types of data so the performance will be better.
			Also as an appian best practice it will be fine if you use one level of nested CDT's wherever 
			it is required.
			
	Data Stores
		Data stores allow you to insert, update, query, and delete data in the format needed by your applications 
		without writing structured queries (SQL). You must have a business data source configured to use this feature.
		Custom data types are used to stored data in database.
		
		To create a data store, complete the following:
			Open an application in Appian Designer and use the New menu to select Data Store.
			Select a Data Source from the available list. See also: Configuring Relational Databases
			Click Create & Edit to see the newly created data store in new browser window.
			Enter a name for the new entity.
			Select a data type for the entity by clicking Browse and selecting a custom data type from the displayed list.
			Click Verify to validate that the necessary data structures have been created in the database, and that the database is available.	
			Click Save and Publish.
			
		Running DDL Scripts
			After selecting Create tables manually, click Download DDL Script.
			Review the script or have it reviewed by your DBA to ensure that it meets your organization's requirements.
			If the script does not meet your requirements, you can modify your custom data type to better suit your needs
			If the script meets your organization's requirements, run the DDL script to create the necessary tables for your data store entity.
			Click Verify Again.
	
	Folder
		There are three types of folders
			1. Document folder
				All the document needs to be stored in document type folder.
			2. Process model folder
				All the process model needs to be stored in process model type folder.	
			3. Rule folder
				Constant, Expression rule, interfaces, Connected System, Integration object, Decision, 
				etc. can be stored in rule type folder.
		Note: Data type, Data store, Record type, Site, decision, Group, Feed type these object do not
		required to be saved in folder.
		

	SAIL (Self-Assembling Interface Layer)	
		SAIL is Appian's patented language to build user interfaces.
		SAIL is server side coding language. As SAIL is server-side coding and as it does not depend 
		on any client side coding e.g. Java script, CSS it works on any browser and also default 
		compatible to mobile application.
		SAIL has below component category.
			1. SAIL Layout
				i. Form layout: This is for reserving the space for form, mostly use where we actually
				submit something.
				e.g Add Employee Details, Submit Visa Application.
				
			2. SAIL Inputs
				a. textField
				b. dateField
				c. paragraphField
				d. dropdownField
				e. checkboxField
				
			3. Selection  --Radio button, checkbox ,select a row in grid
			4. Display --rich text field for displaying images and icon
			5. Image type
			6. Action  --button , link etc
			7. Link 
			8. Grid
			9. Charts
			10. Picker  -- auto complete
			11. Browser 
			12. Hierarchy Browser Elements

		SAIL code execution
			1. When we test the interface, code starts executing from top to bottom, it executes ecah 
			and every line except saveInto line of every component.
			2. saveinto line of component will be executed only if we interact with the field(component)
			3. When we interact with any field, saveInto of that field well be executed first. 
			After that code will start execution from top to bottom and it will skip the save into lines
			
		SAIL field common parameters
			1. label - 
			value,
			saveinto etc
				
				
		Appian SAIL is the framework that takes declarative UI definitions to generate dynamic, interactive,
		and multi-platform user experiences.
		Before SAIL, designing user interface was very difficult because of traditional 
		UI(HTML, CSS, javascript, etc.) and platform dependent.
		For mobile users different technologies requied.
		Each business has unique needs which offen means costly custom software and time consuming. 
		To overcome the above challanges Appian came up with the SAIL concept. 
		which is easy to user, portable, timeless, powerfull, beautiful and affordable.
		It is cross browser, device and OS compatible
		
		
	Interface in Appian
		I have a requirment where i need to capture user details and to store in database. 
		In Appian we have concept called interface.
		
		How to create interface
			

	


	Local Variables
		When a variable is defined in an expression instead of made available to the expression by the framework,
		it is called a local variable.	
		There are two functions available to define local variables in expressions: 
			1. load() 
				The load() function allows you to define one or more local variables. 
				 The load() function only sets its local variables to their configured values when it is 
				 first rendered, often when the user first navigates to the interface or refreshes the browser window.
			2. with()
				The with() function also creates local variables,We know load() sets its variables only
				when the interface first loads, with() sets its variables every time the expression is reevaluated.
				NOTE: The value of with() variables cannot be updated in component saveInto inputs because 
				their value is overwritten whenever the expression reevaluates.
				
		Ex:	load(
			  local!loadVariable: rand(),
			  local!typedText,
			  with(
				local!withVariable: rand(),
				{
				  a!textField(label: "load() Variable", readOnly: true, value: local!loadVariable),
				  a!textField(label: "with() Variable", readOnly: true, value: local!withVariable),
				  a!textField(label: "Try typing here", value: local!typedText, saveInto: local!typedText),
				  a!buttonLayout(
					secondaryButtons: {
					  a!buttonWidget(
						label: "Increment load() variable",
						value: local!loadVariable+1,
						saveInto: local!loadVariable
					  )
					}
				  )
				}
			  )
			)	
			
		Arrays and Custom Data Types
			In addition to saving to a variable, you can save into an array at a specific index using square brackets. For example:
				saveInto: local!names[10]
				local!names[local!index]
				
				
				
		Rule Input
			
				
			
		